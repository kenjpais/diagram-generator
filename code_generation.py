"""Diagram Code Generation - Structured JSON â†’ DaC Code"""
from langchain_core.prompts import ChatPromptTemplate
from schemas import GraphIntent
from llm_utils import get_code_gen_llm
from prompt_loader import get_system_prompt, get_human_prompt, get_few_shot_example
from response_parser import extract_response_content, extract_graphviz_code
import json


def generate_diagram_code(graph_intent: GraphIntent) -> str:
    """
    Generate Diagram-as-Code (graphviz) from structured graph intent using LLM.
    
    The LLM generates the Graphviz code from the JSON schema and data.
    Uses Gemini LLM by default for code generation.
    
    Args:
        graph_intent: Structured GraphIntent object
        
    Returns:
        str: Raw graphviz DOT code as a string (generated by LLM)
    """
    llm = get_code_gen_llm()
    
    # Load prompts from YAML
    system_prompt = get_system_prompt("code_generation.yaml")
    human_prompt = get_human_prompt("code_generation.yaml")
    few_shot_example = get_few_shot_example("code_generation.yaml")
    
    # Convert GraphIntent to JSON string (actual data)
    intent_json = json.dumps(graph_intent.model_dump(), indent=2)
    
    # Get the JSON schema for GraphIntent to help LLM understand the structure
    schema = graph_intent.model_json_schema()
    schema_json = json.dumps(schema, indent=2)
    
    # Create prompt
    prompt = ChatPromptTemplate.from_messages([
        ("system", system_prompt + "\n\n" + few_shot_example),
        ("human", human_prompt)
    ])
    
    # Format and invoke - pass both the schema and the actual data
    formatted_prompt = prompt.format_prompt(
        intent_json=intent_json,
        json_schema=schema_json
    )
    response = llm.invoke(formatted_prompt.to_messages())
    
    # Extract content and parse graphviz code
    content = extract_response_content(response)
    code = extract_graphviz_code(content)
    
    return code


if __name__ == "__main__":
    # Test the code generation
    from schemas import Component, Relationship, Group, GraphIntent
    
    test_intent = GraphIntent(
        title="Test Architecture",
        groups=[
            Group(id="vpc_1", label="VPC 1", type="vpc")
        ],
        components=[
            Component(id="api_gateway", label="API Gateway", type="api", parent_group="vpc_1"),
            Component(id="user_service", label="User Service", type="service", parent_group="vpc_1"),
            Component(id="db", label="Database", type="database")
        ],
        relationships=[
            Relationship(source="api_gateway", target="user_service", label="routes to", type="api_call"),
            Relationship(source="user_service", target="db", label="queries", type="data_flow")
        ]
    )
    
    code = generate_diagram_code(test_intent)
    print(code)
